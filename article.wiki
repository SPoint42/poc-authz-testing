__NOTOC__
<div style="width:100%;height:160px;border:0,margin:0;overflow: hidden;">[[File:Cheatsheets-header.jpg|link=]]</div>

{| style="padding: 0;margin:0;margin-top:10px;text-align:left;" |-
| valign="top" style="border-right: 1px dotted gray;padding-right:25px;" |
Last revision (mm/dd/yy): '''{{REVISIONMONTH}}/{{REVISIONDAY}}/{{REVISIONYEAR}}'''

__TOC__{{TOC hidden}}

= Introduction  =

Authorizations definition and implementation is one of the important protection measures of an application. They are defined in the creation phase of the project and, even if authorization issues are found when the application is initially released and submitted to a security audit before to go live, the most signicant number of issues related to authorization came in the maintenance lifetime of the application.

This situation is often explained by the fact that features are added/modified and no review of the authorization was performed on the application before the publishing of the new release, for cost or time issue reason.

= Context =

In order to try to address this situation, it's can be interesting to automate the evaluation of the authorization definition and implementation on the application. This, to constantly ensure that implementation of the authorization in the application is consistent with the authorization definition.

An authorization is often composed by 2 elements (also named dimension): The '''Feature''' and the '''Logical Role''' that can access it (sometine a third dimension named '''Data''' is added in order to define a access that include a filtering at business data level).

The representation of the different combinations of these 2 dimensions is often named an '''Authorization matrix''' and is often formalized in an Microsoft Excel file.

During a test of an authorization, a '''Logical Role''' is also called a '''Point Of View'''.

= Objective =

This article describe a proposition of implementation in order to automate the tests of an authorization matrix.

This article will use the assumption that 2 dimensions are used to represent a authorization for the technical proposition decribed and take as example a application exposing REST services.

The objective is to provide starting ideas/hints in order to create a tailored way of testing of the authorization matrix for the target application.

= Proposition =

In order to achieve the full automation of the evaluation of the ''authorization matrix'' the folowing action will be performed:

# Formalize the authorization matrix in a pivot format file allowing:
## The processing by a program in a easy way.
## To be read and updated by a human for the follow-up of the authorization combinations.
## Hierarchy in the information in order to easily materialize the differents combination.
## The maximum possible of independence from the technology and design used to implements the application exposing the features.
# Create a set of integration tests that will fully use the authorization matrix pivot file as input source in order to evaluate the differents combinations with:
## The minimum possible of maintenance when the authorization matrix pivot file is updated.
## A clear indication, in case of failed test, of the source authorization combination that do not respect the authorization matrix.

== Authorization matrix pivot file ==

The XML format will be used to formalize the authorization matrix.

The XML structure will contains 3 main sections:

* Node '''roles''': This node describe the possible logical roles used in the system, is used to provide a list  and the explanation of the different roles (authorization level).
* Node '''services''': This node list and describe the available services exposed by the system and the associated logical role(s) that can call them.
* Node '''services-testing''': This node provide a test payload for each service if the service use input data other than coming from url or path.

This is an example of the XML used to represents the authorization:

''Placeholders (values between {}) are used to mark location where test value must be placed by the integration tests if needed''

<pre>
  <?xml version="1.0" encoding="UTF-8"?>
  <!--
      This file materialize the authorization matrix for the different services exposed by the system.

      It will be used by the tests as a input sources for the different tests cases:
      1) Evaluate legitimate access and is correct implementation
      2) Identify not legitimate access (authorization definition issue on service implementation)

      The "name" attribute is used for identify uniquely a SERVICE or a ROLE.
  -->
  <authorization-matrix>

      <!-- Describe the possible logical roles used in the system, is used here to provide a list+explanation
      of the different roles (authorization level) -->
      <roles>
          <role name="ANONYMOUS" description="Indicate that no authorization is needed"/>
          <role name="BASIC" description="Role affected to a standard user (lowest access right just above anonymous)"/>
          <role name="ADMIN" description="Role affected to a administrator user (highest access right)"/>
      </roles>

      <!-- List and describe the available services exposed by the system and the associated logical role(s) that can call them -->
      <services>
          <service name="ReadSingleMessage" uri="/{messageId}" http-method="GET"
          http-response-code-for-access-allowed="200"
          http-response-code-for-access-denied="403">
              <role name="ANONYMOUS"/>
              <role name="BASIC"/>
              <role name="ADMIN"/>
          </service>
          <service name="ReadAllMessages" uri="/" http-method="GET"
          http-response-code-for-access-allowed="200"
          http-response-code-for-access-denied="403">
              <role name="ANONYMOUS"/>
              <role name="BASIC"/>
              <role name="ADMIN"/>
          </service>
          <service name="CreateMessage" uri="/" http-method="PUT"
          http-response-code-for-access-allowed="200"
          http-response-code-for-access-denied="403">
              <role name="BASIC"/>
              <role name="ADMIN"/>
          </service>
          <service name="DeleteMessage" uri="/{messageId}" http-method="DELETE"
          http-response-code-for-access-allowed="200"
          http-response-code-for-access-denied="403">
              <role name="ADMIN"/>
          </service>
      </services>

      <!-- Provide a test payload for each service if needed -->
      <services-testing>
          <service name="ReadSingleMessage">
              <payload/>
          </service>
          <service name="ReadAllMessages">
              <payload/>
          </service>
          <service name="CreateMessage">
              <payload content-type="application/json">
                  {"content":"test"}
              </payload>
          </service>
          <service name="DeleteMessage">
              <payload/>
          </service>
      </services-testing>

  </authorization-matrix>
</pre>

== Integration tests ==

TODO
